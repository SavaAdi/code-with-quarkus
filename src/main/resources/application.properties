# This enables debug-level logging specifically for ArC. With this,
# you can see all the optimizations ArC is doing during startup. A bonus
# is that you can see all the unused CDI-injectable beans that ArC
# removes from the runtime. Even more bonus: It shows you what you
# can inject in the ArC world.
# This increase the startup time and console output by quite a bit
#quarkus.log.category."io.quarkus.arc.processor".level=DEBUG

# Enabling CORS
quarkus.http.cors=true
quarkus.http.cors.origins=http://example.com
quarkus.http.cors.methods=GET,PUT,POST,DELETE
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with

# ALL,CONFIG,FINE,FINER,FINEST,OFF,SEVERE,
#WARNING.
quarkus.log.console.level=FINEST

# This affects the JAR artifact that’s produced by Maven
quarkus.application.name=quarkus-playground

quarkus.http.port=8080

# Secure connections
# keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass passw33 -validity 360 -keysize 2048
# test-with --insecure because it is self-signed: curl --insecure https://localhost:8443/ok
quarkus.http.ssl-port=8443
quarkus.http.ssl.certificate.key-store-file=keystore.jks
quarkus.http.ssl.certificate.key-store-file-type=jks
quarkus.http.ssl.certificate.key-store-password=passw33

# This is the container-friendly default. Allows this
# microservice to listen on any network interface
quarkus.http.host=0.0.0.0

