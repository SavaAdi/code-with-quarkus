# This enables debug-level logging specifically for ArC. With this,
# you can see all the optimizations ArC is doing during startup. A bonus
# is that you can see all the unused CDI-injectable beans that ArC
# removes from the runtime. Even more bonus: It shows you what you
# can inject in the ArC world.
# This increase the startup time and console output by quite a bit
#quarkus.log.category."io.quarkus.arc.processor".level=DEBUG

# Enabling CORS
quarkus.http.cors=true
quarkus.http.cors.origins=http://example.com
quarkus.http.cors.methods=GET,PUT,POST,DELETE
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with

# ALL,CONFIG,FINE,FINER,FINEST,OFF,SEVERE,
#WARNING.
quarkus.log.console.level=FINEST

# This affects the JAR artifact that’s produced by Maven
quarkus.application.name=quarkus-playground

# To authenticate using basic access authentication this must be set to true
quarkus.http.auth.basic=true

# Elytron file config is for dev and testing - NOT FOR PRODUCTION
quarkus.security.users.file.enabled=true
quarkus.security.users.file.plain-text=true
quarkus.security.users.file.users=users.properties
quarkus.security.users.file.roles=roles.properties
quarkus.http.auth.session.encryption-key=sjdf748y&T^tcwyf76w34tw3647wfbhhrskdfn

# To authenticate using form access authentication this must be set to true
quarkus.http.auth.form.enabled=false

quarkus.http.port=8080

# Secure connections
# keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass passw33 -validity 360 -keysize 2048
# test-with --insecure because it is self-signed: curl --insecure https://localhost:8443/ok
quarkus.http.ssl-port=8443
quarkus.http.ssl.certificate.key-store-file=keystore.jks
quarkus.http.ssl.certificate.key-store-file-type=jks
quarkus.http.ssl.certificate.key-store-password=passw33

# Forces secured port only. Redirect doesn't always work
quarkus.http.insecure-requests=REDIRECT

# This is the container-friendly default. Allows this
# microservice to listen on any network interface
quarkus.http.host=0.0.0.0

# Sets expiration time for "service" cache after 10 seconds after write in cache
quarkus.cache.caffeine."service".expire-after-write=10

# docker run --ulimit memlock=-1:-1 --memory-swappiness=0 --name postgres-quarkus -e POSTGRES_USER=hibernate -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=library-database -p 5432:5432 postgres:13.0-alpine
# configure your datasource
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/library-database
quarkus.datasource.username =hibernate
quarkus.datasource.password =hibernate

# Drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation = drop-and-create

# http://localhost:16686 Jaeger UI
quarkus.jaeger.service-name=${quarkus.application.name}
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1
quarkus.jaeger.endpoint=http://localhost:14268/api/traces

# Kubernetes setup - .\mvn package will generate resources under target/kubernetes
quarkus.kubernetes.replicas=3
quarkus.kubernetes.labels.environment=dev
quarkus.kubernetes.readiness-probe.initial-delay-seconds=10
quarkus.kubernetes.readiness-probe.period-seconds=30

# Security alternative to annotations - must work together with annotations, cannot be contradictory
# Checks from app properties get executed first
#quarkus.http.auth.policy.role-policy1.roles-allowed=Tester 1
#
#quarkus.http.auth.permission.roles1.paths=/hello/secured   2
#quarkus.http.auth.permission.roles1.policy=role-policy1    3
#quarkus.http.auth.permission.roles1.methods=GET  4
#
#quarkus.http.auth.permission.deny1.paths=/hello/denied
#quarkus.http.auth.permission.deny1.policy=deny 5
#
#quarkus.http.auth.permission.permit1.paths=/hello/unsecured
#quarkus.http.auth.permission.permit1.policy=permit 6
#quarkus.http.auth.permission.permit1.methods=GET
#
#quarkus.http.auth.permission.roles2.paths=/hello/authenticated
#quarkus.http.auth.permission.roles2.policy=authenticated
#quarkus.http.auth.permission.roles2.methods=GET

